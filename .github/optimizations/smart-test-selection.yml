# Smart Test Selection Strategy
# Reduces test execution time by 50-70% through intelligent selection

name: Smart Test Execution

# Add this job to replace current test job in ci-cd.yml:

smart-testing:
  name: Smart Test Selection
  runs-on: ubuntu-latest
  needs: quality-gates
  timeout-minutes: 15
  
  strategy:
    matrix:
      # Dynamic test selection based on changed files
      include:
        - test-type: "unit-core"
          condition: "src/core/"
          command: "npm run test:fast -- src/core/"
        - test-type: "unit-ui" 
          condition: "src/ui/"
          command: "npm run test:fast -- src/ui/"
        - test-type: "integration"
          condition: "src/"
          command: "npm run test:fast -- test/integration/"
        - test-type: "e2e-critical"
          condition: "src/"
          command: "npm run test:e2e -- --grep '@critical'"
    fail-fast: false

  steps:
  - name: Checkout code
    uses: actions/checkout@v4

  - name: Check if tests should run
    id: check-tests
    uses: dorny/paths-filter@v3
    with:
      filters: |
        core:
          - 'src/core/**'
        ui:
          - 'src/ui/**'
        config:
          - 'package*.json'
          - 'vitest.config.ts'
          - 'playwright.config.ts'

  - name: Setup test environment
    if: steps.check-tests.outputs.core == 'true' || steps.check-tests.outputs.ui == 'true'
    uses: actions/setup-node@v4
    with:
      node-version: '20'
      cache: 'npm'

  - name: Install dependencies (optimized)
    if: steps.check-tests.outputs.core == 'true' || steps.check-tests.outputs.ui == 'true'
    run: |
      # Only install test dependencies for faster setup
      npm ci --production=false --prefer-offline --no-audit

  - name: Run targeted tests
    if: matrix.test-type == 'unit-core' && steps.check-tests.outputs.core == 'true'
    run: ${{ matrix.command }}

  - name: Run UI tests
    if: matrix.test-type == 'unit-ui' && steps.check-tests.outputs.ui == 'true'
    run: ${{ matrix.command }}

  - name: Run integration tests
    if: matrix.test-type == 'integration' && (steps.check-tests.outputs.core == 'true' || steps.check-tests.outputs.ui == 'true')
    run: ${{ matrix.command }}

  - name: Run critical E2E tests
    if: matrix.test-type == 'e2e-critical' && github.event_name != 'pull_request'
    run: |
      npx playwright install --with-deps chromium
      ${{ matrix.command }}

  - name: Upload test results
    if: always()
    uses: actions/upload-artifact@v4
    with:
      name: test-results-${{ matrix.test-type }}
      path: |
        test-results/
        coverage/
      retention-days: 1

# Advanced E2E optimization with sharding
parallel-e2e:
  name: Parallel E2E Tests
  runs-on: ubuntu-latest
  if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
  timeout-minutes: 20
  
  strategy:
    matrix:
      shard: [1, 2, 3, 4]  # 4-way parallel execution
      browser: [chromium]  # Single browser for speed
    fail-fast: false

  steps:
  - name: Checkout code
    uses: actions/checkout@v4

  - name: Setup Node.js
    uses: actions/setup-node@v4
    with:
      node-version: '20'
      cache: 'npm'

  - name: Install dependencies
    run: npm ci --prefer-offline

  - name: Cache Playwright browsers
    uses: actions/cache@v4
    with:
      path: ~/.cache/ms-playwright
      key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

  - name: Install Playwright
    run: npx playwright install --with-deps ${{ matrix.browser }}

  - name: Run E2E tests (sharded)
    run: |
      npm run test:e2e -- \
        --project=${{ matrix.browser }} \
        --shard=${{ matrix.shard }}/4 \
        --reporter=json \
        --output-dir=test-results-shard-${{ matrix.shard }}

  - name: Upload E2E results
    if: always()
    uses: actions/upload-artifact@v4
    with:
      name: e2e-results-${{ matrix.browser }}-shard-${{ matrix.shard }}
      path: test-results-shard-${{ matrix.shard }}/
      retention-days: 1
