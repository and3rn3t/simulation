name: Enhanced Third-Party Integrations

on:
  schedule:
    - cron: '0 3 * * *' # Daily at 3 AM (after quality monitoring)
  workflow_dispatch:
    inputs:
      integration_type:
        description: 'Integration type to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - security
          - performance
          - accessibility

# Don't block other workflows
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  NODE_VERSION: '20'

jobs:
  # ================================
  # ADVANCED SECURITY INTEGRATIONS
  # ================================
  semgrep-analysis:
    name: Semgrep SAST Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.integration_type == 'all' || github.event.inputs.integration_type == 'security' || github.event_name == 'schedule'
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Run Semgrep Security Analysis
      run: |
        echo "🔒 Running SAST analysis..."
        npx semgrep --config=auto src/ --json > semgrep-results.json || true
        echo "✅ Security analysis completed" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true

    - name: Upload Semgrep results to GitHub
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif
      continue-on-error: true

  # Supply Chain Security
  supply-chain-analysis:
    name: Supply Chain Analysis
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event.inputs.integration_type == 'all' || github.event.inputs.integration_type == 'security' || github.event_name == 'schedule')
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Generate supply chain report
      run: |
        echo "📦 Supply Chain Security Report" >> $GITHUB_STEP_SUMMARY
        echo "===============================" >> $GITHUB_STEP_SUMMARY
        
        # Check for package integrity
        npm audit signatures --audit-level moderate || true
        
        # Generate SBOM (Software Bill of Materials)
        npx @cyclonedx/cyclonedx-npm --output-file sbom.json || true
        
        echo "✅ Supply chain analysis completed" >> $GITHUB_STEP_SUMMARY

    - name: Upload supply chain artifacts
      uses: actions/upload-artifact@v4
      with:
        name: supply-chain-report
        path: |
          sbom.json
          npm-audit.json
        retention-days: 30

  # ================================
  # ADVANCED CODE QUALITY
  # ================================
  codecov-enhanced:
    name: Enhanced Code Coverage
    runs-on: ubuntu-latest
    if: github.event.inputs.integration_type == 'all' || github.event_name == 'schedule'
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests with coverage
      run: npm run test:coverage

    - name: Upload to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      continue-on-error: true

    - name: Coverage Summary
      run: |
        echo "📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "=================" >> $GITHUB_STEP_SUMMARY
        if [ -f coverage/coverage-summary.json ]; then
          npm install -g json
          echo "**Lines Coverage:** $(cat coverage/coverage-summary.json | json total.lines.pct)%" >> $GITHUB_STEP_SUMMARY
          echo "**Functions Coverage:** $(cat coverage/coverage-summary.json | json total.functions.pct)%" >> $GITHUB_STEP_SUMMARY
          echo "**Branches Coverage:** $(cat coverage/coverage-summary.json | json total.branches.pct)%" >> $GITHUB_STEP_SUMMARY
        fi

  # ================================
  # VISUAL & ACCESSIBILITY TESTING
  # ================================
  percy-visual-testing:
    name: Percy Visual Regression
    runs-on: ubuntu-latest
    if: github.event.inputs.integration_type == 'all' || github.event.inputs.integration_type == 'accessibility' || github.event_name == 'schedule'
    timeout-minutes: 20
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install chromium

    - name: Visual Testing with Percy (optional)
      run: |
        echo "🎨 Running visual regression tests..."
        npm run test:visual || true
        echo "✅ Visual tests completed" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true

  enhanced-accessibility:
    name: Enhanced Accessibility Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.integration_type == 'all' || github.event.inputs.integration_type == 'accessibility' || github.event_name == 'schedule'
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Install accessibility tools
      run: |
        npm install -g @axe-core/cli
        npm install -g pa11y-ci

    - name: Start test server
      run: |
        npm install -g http-server
        http-server dist -p 8080 &
        sleep 5

    - name: axe-core accessibility scan
      run: |
        axe http://localhost:8080 \
          --tags wcag2a,wcag2aa,wcag21aa \
          --reporter json \
          --output axe-results.json
      continue-on-error: true

    - name: pa11y accessibility scan
      run: |
        echo "http://localhost:8080" > urls.txt
        pa11y-ci --sitemap http://localhost:8080/sitemap.xml || pa11y-ci --urls-from-file urls.txt
      continue-on-error: true

    - name: Upload accessibility reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-reports
        path: |
          axe-results.json
          pa11y-report.json
        retention-days: 30

  # ================================
  # PERFORMANCE & BUNDLE ANALYSIS
  # ================================
  bundle-analyzer:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.integration_type == 'all' || github.event.inputs.integration_type == 'performance' || github.event_name == 'schedule'
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install bundle analyzers
      run: |
        npm install -g webpack-bundle-analyzer
        npm install -g bundlesize

    - name: Build with analysis
      run: |
        npm run build
        npx vite-bundle-analyzer dist --format json --output bundle-analysis.json

    - name: Bundle size check
      run: |
        # Check if bundle size is reasonable
        BUNDLE_SIZE=$(du -sk dist | cut -f1)
        echo "Bundle size: ${BUNDLE_SIZE}KB"
        
        if [ $BUNDLE_SIZE -gt 2048 ]; then
          echo "⚠️ Bundle size is large (${BUNDLE_SIZE}KB > 2MB)" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ Bundle size is reasonable (${BUNDLE_SIZE}KB)" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Size Limit Check
      run: npx size-limit
      continue-on-error: true

    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis
        path: bundle-analysis.json
        retention-days: 30

  # ================================
  # INFRASTRUCTURE SCANNING
  # ================================
  trivy-container-scan:
    name: Trivy Container Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.integration_type == 'all' || github.event.inputs.integration_type == 'security' || github.event_name == 'schedule'
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        load: true
        tags: organism-simulation:scan
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'organism-simulation:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # ================================
  # DEPENDENCY INSIGHTS
  # ================================
  dependency-insights:
    name: Advanced Dependency Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.integration_type == 'all' || github.event_name == 'schedule'
    timeout-minutes: 10
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install analysis tools
      run: |
        npm install -g npm-check-updates
        npm install -g depcheck
        npm install -g license-checker

    - name: Dependency analysis
      run: |
        echo "📦 Dependency Analysis Report" >> $GITHUB_STEP_SUMMARY
        echo "=============================" >> $GITHUB_STEP_SUMMARY
        
        # Check for unused dependencies
        npx depcheck --json > depcheck-results.json || true
        
        # Check for outdated packages
        npx npm-check-updates --format json > ncu-results.json || true
        
        # License compliance check
        npx license-checker --json > license-check.json || true
        
        echo "✅ Dependency analysis completed" >> $GITHUB_STEP_SUMMARY

    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-analysis
        path: |
          depcheck-results.json
          ncu-results.json
          license-check.json
        retention-days: 30

  # ================================
  # SUMMARY REPORTING
  # ================================
  integration-summary:
    name: Integration Summary
    runs-on: ubuntu-latest
    needs: [semgrep-analysis, codecov-enhanced, percy-visual-testing, enhanced-accessibility, bundle-analyzer, trivy-container-scan, dependency-insights, supply-chain-analysis]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: Generate Integration Report
      run: |
        echo "🔗 Third-Party Integrations Summary" >> $GITHUB_STEP_SUMMARY
        echo "===================================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Integration | Status | Notes |" >> $GITHUB_STEP_SUMMARY
        echo "|-------------|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Semgrep SAST | ${{ needs.semgrep-analysis.result || 'Skipped' }} | Advanced security analysis |" >> $GITHUB_STEP_SUMMARY
        echo "| Enhanced Coverage | ${{ needs.codecov-enhanced.result || 'Skipped' }} | Detailed coverage tracking |" >> $GITHUB_STEP_SUMMARY
        echo "| Percy Visual | ${{ needs.percy-visual-testing.result || 'Skipped' }} | Visual regression detection |" >> $GITHUB_STEP_SUMMARY
        echo "| Accessibility | ${{ needs.enhanced-accessibility.result || 'Skipped' }} | WCAG compliance |" >> $GITHUB_STEP_SUMMARY
        echo "| Bundle Analysis | ${{ needs.bundle-analyzer.result || 'Skipped' }} | Performance optimization |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Security | ${{ needs.trivy-container-scan.result || 'Skipped' }} | Docker vulnerability scan |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Insights | ${{ needs.dependency-insights.result || 'Skipped' }} | Package management |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "All integrations run independently and don't block your main CI/CD pipeline." >> $GITHUB_STEP_SUMMARY

    - name: Notify completion
      run: |
        echo "🎉 Enhanced integrations completed!"
        echo "Check individual job results for detailed insights."
