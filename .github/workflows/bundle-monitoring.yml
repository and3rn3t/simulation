# Bundle Size Monitoring Workflow
#
# This workflow monitors bundle size changes and provides optimization insights
# for achieving 30-50% cost reduction through intelligent artifact management.

name: Bundle Size Monitoring

on:
  pull_request:
    paths:
      - 'src/**'
      - 'package*.json'
      - 'vite.config.ts'
      - 'tsconfig*.json'
  push:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Need history for size comparison
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit --progress=false
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        VITE_BUILD_DATE: ${{ github.run_number }}
        VITE_GIT_COMMIT: ${{ github.sha }}
    
    # Download previous bundle history for comparison
    - name: Download previous bundle history
      uses: actions/download-artifact@v4
      with:
        name: bundle-history
        path: .
      continue-on-error: true
    
    - name: Analyze bundle size
      run: |
        echo "📊 Running bundle analysis..."
        node scripts/bundle-analyzer.mjs
      env:
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
    
    - name: Upload bundle analysis report
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis-report-${{ github.sha }}
        path: bundle-analysis-report.json
        retention-days: 30
    
    - name: Upload updated bundle history
      uses: actions/upload-artifact@v4
      with:
        name: bundle-history
        path: bundle-size-history.json
        retention-days: 90
    
    # Create detailed PR comment with bundle analysis
    - name: Comment bundle analysis on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read bundle analysis report
          let report;
          try {
            report = JSON.parse(fs.readFileSync('bundle-analysis-report.json', 'utf8'));
          } catch (error) {
            console.log('Could not read bundle analysis report');
            return;
          }
          
          // Create comment content
          const budgetEmoji = report.budgetStatus.total.status === 'pass' ? '✅' : '❌';
          const gzippedEmoji = report.budgetStatus.gzipped.status === 'pass' ? '✅' : '❌';
          
          let comment = `## 📦 Bundle Size Analysis\n\n`;
          comment += `### Summary\n`;
          comment += `| Metric | Value | Status |\n`;
          comment += `|--------|--------|--------|\n`;
          comment += `| **Total Size** | ${report.summary.totalSizeFormatted} | ${budgetEmoji} ${report.budgetStatus.total.percentage}% of budget |\n`;
          comment += `| **Gzipped** | ${report.summary.gzippedSizeFormatted} | ${gzippedEmoji} ${report.budgetStatus.gzipped.percentage}% of budget |\n`;
          comment += `| **Compression** | ${report.summary.compressionRatio}% | ℹ️ |\n`;
          comment += `| **Files** | ${report.summary.fileCount} | ℹ️ |\n`;
          comment += `| **Chunks** | ${report.summary.chunkCount} | ℹ️ |\n\n`;
          
          // Category breakdown
          comment += `### Bundle Breakdown\n`;
          comment += `| Category | Size | Files |\n`;
          comment += `|----------|------|-------|\n`;
          Object.entries(report.categories).forEach(([category, data]) => {
            if (data.count > 0) {
              const sizeFormatted = (data.size / 1024).toFixed(1) + ' KB';
              comment += `| **${category}** | ${sizeFormatted} | ${data.count} |\n`;
            }
          });
          comment += `\n`;
          
          // Largest files
          if (report.largestFiles.length > 0) {
            comment += `### Largest Files\n`;
            report.largestFiles.slice(0, 5).forEach((file, index) => {
              comment += `${index + 1}. \`${file.path}\` - **${file.sizeFormatted}**\n`;
            });
            comment += `\n`;
          }
          
          // Warnings
          if (report.warnings && report.warnings.length > 0) {
            comment += `### ⚠️ Warnings\n`;
            report.warnings.forEach(warning => {
              const emoji = warning.severity === 'high' ? '🚨' : warning.severity === 'medium' ? '⚠️' : 'ℹ️';
              comment += `${emoji} **${warning.type}**: ${warning.message}\n`;
            });
            comment += `\n`;
          }
          
          // Recommendations
          if (report.recommendations && report.recommendations.length > 0) {
            comment += `### 💡 Optimization Opportunities\n`;
            report.recommendations.forEach((rec, index) => {
              const priority = rec.priority === 'high' ? '🔴' : rec.priority === 'medium' ? '🟡' : '🟢';
              comment += `${index + 1}. ${priority} **${rec.title}**\n`;
              comment += `   ${rec.description}\n`;
              if (rec.potentialSaving) {
                comment += `   💰 Potential saving: **${rec.potentialSaving}**\n`;
              }
              comment += `\n`;
            });
          }
          
          comment += `---\n`;
          comment += `📊 Full analysis available in [bundle-analysis-report.json](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    # Add bundle size to GitHub Step Summary
    - name: Update step summary
      if: always()
      run: |
        if [ -f "bundle-analysis-report.json" ]; then
          echo "## 📦 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract summary data
          TOTAL_SIZE=$(cat bundle-analysis-report.json | jq -r '.summary.totalSizeFormatted')
          GZIPPED_SIZE=$(cat bundle-analysis-report.json | jq -r '.summary.gzippedSizeFormatted')
          COMPRESSION=$(cat bundle-analysis-report.json | jq -r '.summary.compressionRatio')
          BUDGET_STATUS=$(cat bundle-analysis-report.json | jq -r '.budgetStatus.total.status')
          BUDGET_PERCENTAGE=$(cat bundle-analysis-report.json | jq -r '.budgetStatus.total.percentage')
          
          # Status emoji
          if [ "$BUDGET_STATUS" = "pass" ]; then
            STATUS_EMOJI="✅"
          else
            STATUS_EMOJI="❌"
          fi
          
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total Size | $TOTAL_SIZE |" >> $GITHUB_STEP_SUMMARY
          echo "| Gzipped Size | $GZIPPED_SIZE |" >> $GITHUB_STEP_SUMMARY
          echo "| Compression | ${COMPRESSION}% |" >> $GITHUB_STEP_SUMMARY
          echo "| Budget Status | $STATUS_EMOJI ${BUDGET_PERCENTAGE}% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show warnings if any
          WARNING_COUNT=$(cat bundle-analysis-report.json | jq '.warnings | length')
          if [ "$WARNING_COUNT" -gt 0 ]; then
            echo "### ⚠️ Warnings: $WARNING_COUNT" >> $GITHUB_STEP_SUMMARY
            cat bundle-analysis-report.json | jq -r '.warnings[] | "- " + .message' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Show top recommendations
          REC_COUNT=$(cat bundle-analysis-report.json | jq '.recommendations | length')
          if [ "$REC_COUNT" -gt 0 ]; then
            echo "### 💡 Top Recommendations" >> $GITHUB_STEP_SUMMARY
            cat bundle-analysis-report.json | jq -r '.recommendations[0:3][] | "- **" + .title + "**: " + .description' >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️ Bundle analysis report not found" >> $GITHUB_STEP_SUMMARY
        fi

  # Optional: Bundle size trend analysis (runs on main branch)
  bundle-trends:
    name: Bundle Size Trends
    runs-on: ubuntu-latest
    needs: bundle-analysis
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download bundle history
      uses: actions/download-artifact@v4
      with:
        name: bundle-history
        path: .
      continue-on-error: true
    
    - name: Generate trend analysis
      run: |
        if [ -f "bundle-size-history.json" ]; then
          echo "📈 Analyzing bundle size trends..."
          
          # Extract last 10 builds for trend analysis
          node -e "
            const fs = require('fs');
            const history = JSON.parse(fs.readFileSync('bundle-size-history.json', 'utf8'));
            const recent = history.builds.slice(-10);
            
            console.log('📊 Bundle Size Trend (Last 10 builds):');
            recent.forEach((build, i) => {
              const date = new Date(build.timestamp).toLocaleDateString();
              const size = (build.totalSize / 1024 / 1024).toFixed(2);
              const gzipped = (build.gzippedSize / 1024 / 1024).toFixed(2);
              console.log(\`\${i + 1}. \${date} - Total: \${size}MB, Gzipped: \${gzipped}MB\`);
            });
            
            if (recent.length >= 2) {
              const latest = recent[recent.length - 1];
              const previous = recent[recent.length - 2];
              const change = latest.totalSize - previous.totalSize;
              const changePercent = ((change / previous.totalSize) * 100).toFixed(1);
              
              console.log(\`\nTrend: \${change >= 0 ? '+' : ''}\${(change / 1024).toFixed(1)}KB (\${changePercent}%)\`);
            }
          "
        else
          echo "No bundle history available for trend analysis"
        fi
