name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type check
      run: npm run type-check
    
    - name: Run unit tests
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true
    
    - name: Run performance tests
      run: npm run test:performance
      continue-on-error: true
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run E2E tests
      run: npm run test:e2e
      continue-on-error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results/
          coverage/
          playwright-report/
        retention-days: 30

    - name: Test summary
      if: always()
      run: |
        echo "üß™ Test execution completed"
        echo "üìä Check the artifacts for detailed test results and coverage reports"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm run security:audit
      continue-on-error: true
    
    - name: Run dependency vulnerability scan
      run: |
        if [ -n "${{ secrets.SNYK_TOKEN }}" ]; then
          export SNYK_TOKEN="${{ secrets.SNYK_TOKEN }}"
          npm run security:scan
        else
          echo "‚ö†Ô∏è Snyk token not configured. Skipping Snyk scan."
          echo "To enable Snyk scanning, add SNYK_TOKEN to repository secrets."
        fi
      continue-on-error: true

    - name: Security scan summary
      run: |
        echo "üîç Security scan completed"
        echo "üìã If vulnerabilities were found, please review and address them"

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Configure staging environment
      run: |
        node scripts/env/setup-env.cjs staging
        echo "VITE_BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> .env
        echo "VITE_GIT_COMMIT=${GITHUB_SHA}" >> .env
    
    - name: Deploy to Cloudflare Pages (Preview)
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        # Ensure CLOUDFLARE_API_TOKEN is set in repository secrets: https://github.com/<owner>/<repo>/settings/secrets/actions
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: organism-simulation
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Run staging smoke tests
      run: |
        echo "üîç Running staging smoke tests..."
        npm run test:smoke:staging

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Configure production environment
      run: |
        node scripts/env/setup-env.cjs production
        echo "VITE_BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> .env
        echo "VITE_GIT_COMMIT=${GITHUB_SHA}" >> .env
    
    - name: Deploy to Cloudflare Pages (Production)
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: organism-simulation
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        wranglerVersion: '3'
    
    - name: Run production smoke tests
      run: |
        echo "üîç Running production smoke tests..."
        npm run test:smoke:production
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Production deployment successful!"
        echo "Version: $(cat package.json | grep version | cut -d'"' -f4)"
        echo "Commit: ${GITHUB_SHA}"
        # Add notification logic (Slack, Discord, Teams, etc.)
    
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        echo "Please check the logs and take immediate action."
        # Add failure notification logic
