name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type check
      run: npm run type-check
    
    - name: Run unit tests
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
    
    - name: Run performance tests
      run: npm run test:performance
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Run E2E tests
      run: npm run test:e2e
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results/
          coverage/
        retention-days: 30

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm run security:audit
    
    - name: Run dependency vulnerability scan
      run: npm run security:scan
      continue-on-error: true

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Configure staging environment
      run: |
        node scripts/setup-env.js staging
        echo "VITE_BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> .env
        echo "VITE_GIT_COMMIT=${GITHUB_SHA}" >> .env
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Environment: staging"
        echo "URL: https://staging.organism-simulation.com"
        # Add your staging deployment commands here
        # Example: 
        # - Upload to S3/CDN
        # - Deploy to Vercel/Netlify
        # - Update container registry
    
    - name: Run staging smoke tests
      run: |
        echo "üîç Running staging smoke tests..."
        # Add staging validation tests
        # npm run test:staging-smoke

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Configure production environment
      run: |
        node scripts/setup-env.js production
        echo "VITE_BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> .env
        echo "VITE_GIT_COMMIT=${GITHUB_SHA}" >> .env
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Environment: production"
        echo "URL: https://organism-simulation.com"
        # Add your production deployment commands here
        # Example:
        # - Upload to S3/CDN  
        # - Deploy to Vercel/Netlify
        # - Update container registry
        # - Blue-green deployment
    
    - name: Run production smoke tests
      run: |
        echo "üîç Running production smoke tests..."
        # Add production validation tests
        # npm run test:production-smoke
    
    - name: Notify deployment success
      if: success()
      run: |
        echo "üéâ Production deployment successful!"
        echo "Version: $(cat package.json | grep version | cut -d'"' -f4)"
        echo "Commit: ${GITHUB_SHA}"
        # Add notification logic (Slack, Discord, Teams, etc.)
    
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå Production deployment failed!"
        echo "Please check the logs and take immediate action."
        # Add failure notification logic
