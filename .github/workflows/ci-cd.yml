name: Optimized CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM for monitoring
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

# Cancel in-progress workflows for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
  # ================================
  # FAST QUALITY GATES
  # ================================
  quality-gates:
    name: Quality Gates (Fast)
    runs-on: ubuntu-latest
    timeout-minutes: 8
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
      changes-detected: ${{ steps.changes.outputs.any }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      id: changes
      uses: dorny/paths-filter@v3
      with:
        filters: |
          src:
            - 'src/**'
          config:
            - 'package*.json'
            - 'tsconfig*.json'
            - 'vite.config.ts'
            - '.github/workflows/**'
          tests:
            - 'test/**'
            - 'e2e/**'

    - name: Generate cache key
      id: cache-key
      run: echo "key=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ steps.cache-key.outputs.key }}
        restore-keys: ${{ steps.cache-key.outputs.key }}-

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit --progress=false

    # CRITICAL GATES (must pass - fast feedback)
    - name: 🚨 Critical - Type checking
      run: npm run type-check
      timeout-minutes: 2

    - name: 🚨 Critical - Lint (essential rules only)
      run: npm run lint
      timeout-minutes: 2

    - name: ⚡ Fast - Format check  
      run: npm run format:check
      continue-on-error: true
      timeout-minutes: 1

    # Determine deployment strategy
    - name: Check deployment requirements
      id: deploy-check
      run: |
        if [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi

  # ================================
  # PARALLEL ANALYSIS JOBS
  # ================================
  
  # Bundle Size Analysis (Moved from build job for parallel execution)
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: quality-gates
    if: ${{ needs.quality-gates.outputs.changes-detected == 'true' }}
    timeout-minutes: 8
    outputs:
      bundle-size: ${{ steps.analysis.outputs.bundle-size }}
      optimization-potential: ${{ steps.analysis.outputs.optimization-potential }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ needs.quality-gates.outputs.cache-key }}
        restore-keys: ${{ needs.quality-gates.outputs.cache-key }}-

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit --progress=false

    - name: Build for analysis
      run: npm run build
      env:
        VITE_BUILD_DATE: ${{ github.run_number }}
        VITE_GIT_COMMIT: ${{ github.sha }}
        VITE_VERSION: "analysis-build"

    - name: Download previous bundle history
      uses: actions/download-artifact@v4
      with:
        name: bundle-history
        path: .
      continue-on-error: true

    - name: Analyze bundle size
      id: analysis
      run: |
        echo "📊 Analyzing bundle size and optimization opportunities..."
        node scripts/bundle-analyzer.mjs
        
        # Extract key metrics for outputs
        if [ -f "bundle-analysis-report.json" ]; then
          BUNDLE_SIZE=$(cat bundle-analysis-report.json | jq -r '.totalSize // "unknown"')
          OPTIMIZATION_POTENTIAL=$(cat bundle-analysis-report.json | jq -r '.optimizationPotential // "0"')
          
          echo "bundle-size=$BUNDLE_SIZE" >> $GITHUB_OUTPUT
          echo "optimization-potential=$OPTIMIZATION_POTENTIAL" >> $GITHUB_OUTPUT
          
          echo "📊 Bundle Analysis Results:"
          echo "   Total Size: $BUNDLE_SIZE"
          echo "   Optimization Potential: $OPTIMIZATION_POTENTIAL"
        else
          echo "bundle-size=unknown" >> $GITHUB_OUTPUT
          echo "optimization-potential=0" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_REF_NAME: ${{ github.ref_name }}

    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis-${{ github.sha }}
        path: bundle-analysis-report.json
        retention-days: 30

    - name: Upload bundle history
      uses: actions/upload-artifact@v4
      with:
        name: bundle-history
        path: bundle-size-history.json
        retention-days: 90

  # Performance Analytics (Moved to parallel execution)
  performance-analytics:
    name: Performance Analytics
    runs-on: ubuntu-latest
    needs: [quality-gates, smart-test-analysis]
    if: ${{ needs.quality-gates.outputs.changes-detected == 'true' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') }}
    timeout-minutes: 10
    outputs:
      performance-score: ${{ steps.analytics.outputs.performance-score }}
      recommendations: ${{ steps.analytics.outputs.recommendations }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 50 # Need history for trend analysis

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit --progress=false

    - name: Download previous performance data
      uses: actions/download-artifact@v4
      with:
        name: performance-history
        path: .
      continue-on-error: true

    - name: Run performance analytics
      id: analytics
      run: |
        echo "🚀 Running performance analytics..."
        
        # Set environment variables
        export GITHUB_SHA="${{ github.sha }}"
        export GITHUB_REF_NAME="${{ github.ref_name }}"
        export ANALYSIS_DEPTH="standard"
        export INCLUDE_COST_ANALYSIS="true"
        
        # Run analytics
        node scripts/performance-analytics.mjs
        
        # Extract outputs
        if [ -f "performance-analytics-report.json" ]; then
          PERFORMANCE_SCORE=$(cat performance-analytics-report.json | jq -r '.scorecard.overall // 75')
          RECOMMENDATIONS=$(cat performance-analytics-report.json | jq -r '.recommendations | length')
          
          echo "performance-score=$PERFORMANCE_SCORE" >> $GITHUB_OUTPUT
          echo "recommendations=$RECOMMENDATIONS" >> $GITHUB_OUTPUT
          
          echo "📊 Performance Analytics Results:"
          echo "   Performance Score: $PERFORMANCE_SCORE/100"
          echo "   Recommendations: $RECOMMENDATIONS"
        else
          echo "performance-score=75" >> $GITHUB_OUTPUT
          echo "recommendations=0" >> $GITHUB_OUTPUT
        fi

    - name: Upload performance analytics
      uses: actions/upload-artifact@v4
      with:
        name: performance-analytics-${{ github.sha }}
        path: performance-analytics-report.json
        retention-days: 30

    - name: Upload performance history
      uses: actions/upload-artifact@v4
      with:
        name: performance-history
        path: performance-history.json
        retention-days: 90

    - name: Performance summary
      run: |
        echo "## 📊 Performance Analytics Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Score | ${{ steps.analytics.outputs.performance-score }}/100 |" >> $GITHUB_STEP_SUMMARY
        echo "| Recommendations | ${{ steps.analytics.outputs.recommendations }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Analysis Status | ✅ Complete |" >> $GITHUB_STEP_SUMMARY

  # ================================
  # SMART TEST SELECTION (OPTIMIZED)
  # ================================
  smart-test-analysis:
    name: Smart Test Analysis
    runs-on: ubuntu-latest
    needs: quality-gates
    if: ${{ !inputs.skip_tests && needs.quality-gates.outputs.changes-detected == 'true' }}
    timeout-minutes: 5
    outputs:
      test-strategy: ${{ steps.analysis.outputs.test-strategy }}
      tests-selected: ${{ steps.analysis.outputs.tests-selected }}
      time-saved: ${{ steps.analysis.outputs.time-saved }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Need history for diff analysis

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies (minimal)
      run: npm ci --prefer-offline --no-audit --progress=false

    - name: Analyze test requirements
      id: analysis
      run: |
        # Run smart test selection analysis only
        export CI=true
        export EXECUTE_TESTS=false
        
        node scripts/smart-test-selection.mjs
        
        # Extract results
        if [ -f "test-selection-report.json" ]; then
          TEST_STRATEGY=$(cat test-selection-report.json | jq -r '.strategy')
          TESTS_SELECTED=$(cat test-selection-report.json | jq -r '.stats.selectedTests')
          TIME_SAVED=$(cat test-selection-report.json | jq -r '.stats.estimatedTimeSaving')
          
          echo "test-strategy=$TEST_STRATEGY" >> $GITHUB_OUTPUT
          echo "tests-selected=$TESTS_SELECTED" >> $GITHUB_OUTPUT
          echo "time-saved=$TIME_SAVED" >> $GITHUB_OUTPUT
          
          echo "📊 Smart Test Analysis:"
          echo "   Strategy: $TEST_STRATEGY"
          echo "   Tests to run: $TESTS_SELECTED"
          echo "   Time saved: ${TIME_SAVED}s"
        else
          echo "test-strategy=full" >> $GITHUB_OUTPUT
          echo "tests-selected=all" >> $GITHUB_OUTPUT
          echo "time-saved=0" >> $GITHUB_OUTPUT
        fi

    - name: Upload test analysis
      uses: actions/upload-artifact@v4
      with:
        name: test-analysis-${{ github.sha }}
        path: test-selection-report.json
        retention-days: 3

  # ================================
  # OPTIMIZED TESTING SUITE (SMART SELECTION)
  # ================================
  test:
    name: Smart Tests
    runs-on: ubuntu-latest
    needs: [quality-gates, smart-test-analysis]
    if: ${{ !inputs.skip_tests && needs.quality-gates.outputs.changes-detected == 'true' }}
    timeout-minutes: 15

    strategy:
      matrix:
        include:
          - test-type: smart
            condition: ${{ needs.smart-test-analysis.outputs.test-strategy == 'smart' }}
          - test-type: full
            condition: ${{ needs.smart-test-analysis.outputs.test-strategy == 'full' }}
          - test-type: critical
            condition: ${{ needs.smart-test-analysis.outputs.test-strategy == 'critical' }}
      fail-fast: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ needs.quality-gates.outputs.cache-key }}
        restore-keys: ${{ needs.quality-gates.outputs.cache-key }}-

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit --progress=false

    - name: Download test analysis
      uses: actions/download-artifact@v4
      with:
        name: test-analysis-${{ github.sha }}

    - name: ⚡ Smart test execution
      if: needs.smart-test-analysis.outputs.test-strategy == 'smart'
      run: |
        echo "🎯 Running smart test selection (estimated ${needs.smart-test-analysis.outputs.time-saved}s saved)"
        export CI=true
        export EXECUTE_TESTS=true
        node scripts/smart-test-selection.mjs
      timeout-minutes: 8

    - name: 🔍 Full test suite
      if: needs.smart-test-analysis.outputs.test-strategy == 'full'
      run: |
        echo "🔍 Running full test suite (critical changes detected)"
        npm run test:ci
      timeout-minutes: 12

    - name: 🎯 Critical tests only
      if: needs.smart-test-analysis.outputs.test-strategy == 'critical'
      run: |
        echo "🎯 Running critical tests only"
        npm run test:fast -- --run test/unit/core/simulation.test.ts test/unit/core/organism.test.ts test/unit/utils/errorHandler.test.ts test/unit/utils/canvasUtils.test.ts
      timeout-minutes: 5
      
    - name: Upload coverage results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.test-type }}-${{ github.sha }}
        path: coverage/
        retention-days: 3

    - name: Test execution summary
      if: always()
      run: |
        echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Strategy | ${{ needs.smart-test-analysis.outputs.test-strategy }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests Selected | ${{ needs.smart-test-analysis.outputs.tests-selected }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Time Saved | ${{ needs.smart-test-analysis.outputs.time-saved }}s |" >> $GITHUB_STEP_SUMMARY
        echo "| Status | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY

  # ================================
  # E2E TESTS (PARALLEL, NON-BLOCKING)
  # ================================
  e2e-tests:
    name: E2E Tests (Parallel)
    runs-on: ubuntu-latest
    needs: [quality-gates, smart-test-analysis]
    if: ${{ !inputs.skip_tests && (github.event_name == 'push' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch') }}
    timeout-minutes: 30
    continue-on-error: true # Don't block other jobs if E2E fails

    strategy:
      matrix:
        shard: [1, 2] # Split E2E tests into shards for parallel execution
      fail-fast: false # Allow other shards to complete

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Restore dependencies cache
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ needs.quality-gates.outputs.cache-key }}
        restore-keys: ${{ needs.quality-gates.outputs.cache-key }}-

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit --progress=false

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium
      timeout-minutes: 5

    - name: ⚡ E2E tests (sharded)
      run: npm run test:e2e -- --project=chromium --shard=${{ matrix.shard }}/2
      timeout-minutes: 20

    - name: Upload E2E artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-results-shard-${{ matrix.shard }}
        path: |
          test-results/
          playwright-report/
        retention-days: 3

  # ================================
  # BUILD & CONTAINERIZE
  # ================================
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [quality-gates, smart-test-analysis, bundle-analysis] # Added bundle-analysis dependency
    timeout-minutes: 15
    outputs:
      image-digest: ${{ steps.docker-build.outputs.digest }}
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate version
      id: version
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          VERSION="$(cat package.json | jq -r .version)"
        else
          VERSION="$(cat package.json | jq -r .version)-dev.$(date +%s)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"

    - name: Build application
      run: npm run build
      env:
        VITE_BUILD_DATE: ${{ github.run_number }}
        VITE_GIT_COMMIT: ${{ github.sha }}
        VITE_VERSION: ${{ steps.version.outputs.version }}

    # Download bundle analysis results from parallel job
    - name: Download bundle analysis results
      uses: actions/download-artifact@v4
      with:
        name: bundle-analysis-${{ github.sha }}
        path: .
      continue-on-error: true

    # Create performance trigger data (improved version)
    - name: Create performance trigger data
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      run: |
        echo "🎯 Creating performance trigger data..."
        
        # Extract bundle analysis data if available
        BUNDLE_SIZE="unknown"
        OPTIMIZATION_POTENTIAL="0"
        
        if [ -f "bundle-analysis-report.json" ]; then
          BUNDLE_SIZE=$(cat bundle-analysis-report.json | jq -r '.totalSize // "unknown"')
          OPTIMIZATION_POTENTIAL=$(cat bundle-analysis-report.json | jq -r '.optimizationPotential // "0"')
        fi
        
        # Create comprehensive trigger data
        cat > performance-trigger.json << EOF
        {
          "build_data": {
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "version": "${{ steps.version.outputs.version }}",
            "workflow_run_id": "${{ github.run_id }}",
            "bundle_size": "$BUNDLE_SIZE",
            "optimization_potential": "$OPTIMIZATION_POTENTIAL"
          },
          "trigger_reason": "post_build_analysis",
          "analysis_type": "comprehensive",
          "dependencies": {
            "bundle_analysis": "${{ needs.bundle-analysis.outputs.bundle-size }}",
            "test_strategy": "${{ needs.smart-test-analysis.outputs.test-strategy }}",
            "time_saved": "${{ needs.smart-test-analysis.outputs.time-saved }}"
          }
        }
        EOF

    - name: Upload performance trigger data
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      uses: actions/upload-artifact@v4
      with:
        name: performance-trigger-${{ github.sha }}
        path: performance-trigger.json
        retention-days: 1

    - name: Upload build artifacts
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 3

    # Docker Build (Enhanced Multi-Source Caching)
    - name: Set up Docker Buildx (Enhanced)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        driver-opts: |
          image=moby/buildkit:latest
          network=host
        platforms: linux/amd64,linux/arm64
    
    - name: Build Docker image with enhanced caching
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true
        tags: organism-simulation:latest
        # Multi-source caching for maximum efficiency
        cache-from: |
          type=registry,ref=ghcr.io/${{ github.repository }}:cache
          type=registry,ref=ghcr.io/${{ github.repository }}:cache-deps
          type=gha,scope=buildkit-state
          type=local,src=/tmp/.buildx-cache
        cache-to: |
          type=registry,ref=ghcr.io/${{ github.repository }}:cache,mode=max
          type=registry,ref=ghcr.io/${{ github.repository }}:cache-deps,mode=max
          type=gha,scope=buildkit-state,mode=max
          type=local,dest=/tmp/.buildx-cache-new,mode=max
        # Single platform for testing, multi-platform for production
        platforms: linux/amd64
        build-args: |
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=${{ github.sha }}
          VERSION=optimized-v3
          BUILDKIT_INLINE_CACHE=1
    
    # Move cache for next run (GitHub Actions cache optimization)
    - name: Optimize build cache
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
    
    # Move cache for PR builds
    - name: Optimize PR build cache
      if: github.event_name == 'pull_request'
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true
    
    # Enhanced build for pull requests (safe caching)
    - name: Set up Docker Buildx (PR)
      if: github.event_name == 'pull_request'
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
    
    - name: Build Docker image (PR - enhanced local cache)
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        load: true
        tags: organism-simulation:latest
        # Use GitHub Actions cache for PRs (safe and fast)
        cache-from: |
          type=gha,scope=buildkit-pr
          type=local,src=/tmp/.buildx-cache
        cache-to: |
          type=gha,scope=buildkit-pr,mode=max
          type=local,dest=/tmp/.buildx-cache-new,mode=max
        platforms: linux/amd64
        build-args: |
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=${{ github.sha }}
          VERSION=pr-${{ github.event.number }}
          BUILDKIT_INLINE_CACHE=1
    
    - name: Test Docker image
      run: |
        # Run container in background
        docker run -d --name test-container -p 8080:8080 organism-simulation:latest
        
        # Wait for container to be ready
        sleep 15
        
        # Check container logs for debugging
        echo "=== Container logs ==="
        docker logs test-container
        
        # Check if container is still running
        echo "=== Container status ==="
        docker ps -a | grep test-container || echo "Container not found"
        
        # Test main application (nginx serves static files)
        echo "Testing Docker container..."
        curl -f -v --max-time 10 http://localhost:8080/ || {
          echo "=== Additional debugging ==="
          docker logs test-container
          docker exec test-container ps aux || echo "Can't exec into container"
          docker exec test-container netstat -tlnp || echo "Can't check ports"
          exit 1
        }
        
        # Stop and remove container
        docker stop test-container
        docker rm test-container
        
        echo "✅ Docker image tests passed"
    
    - name: Run Docker security scan
      id: trivy-scan
      uses: aquasecurity/trivy-action@0.28.0
      continue-on-error: true
      with:
        image-ref: 'organism-simulation:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'  # Don't fail build on vulnerabilities for now
        trivyignores: '.trivyignore'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('trivy-results.sarif') != ''
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      if: github.event_name != 'pull_request'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image with enhanced caching
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Enhanced multi-source caching for production builds
        cache-from: |
          type=registry,ref=ghcr.io/${{ github.repository }}:cache
          type=registry,ref=ghcr.io/${{ github.repository }}:cache-deps
          type=gha,scope=buildkit-prod
          type=local,src=/tmp/.buildx-cache
        cache-to: |
          type=registry,ref=ghcr.io/${{ github.repository }}:cache,mode=max
          type=registry,ref=ghcr.io/${{ github.repository }}:cache-deps,mode=max
          type=gha,scope=buildkit-prod,mode=max
          type=local,dest=/tmp/.buildx-cache-new,mode=max
        # Multi-platform for production builds
        platforms: ${{ github.ref == 'refs/heads/main' && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
        build-args: |
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.version.outputs.version }}
          BUILDKIT_INLINE_CACHE=1
          NODE_ENV=production
          VERSION=${{ steps.meta.outputs.version }}
  # ================================
  # QUALITY MONITORING (NON-BLOCKING, SCHEDULED)
  # ================================  
  quality-check:
    name: Quality Monitoring
    runs-on: ubuntu-latest
    needs: [quality-gates]
    # Only run on schedule or manual trigger to avoid blocking
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 8

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit --progress=false

    - name: Build for analysis (cached)
      run: npm run build -- --mode=production
      env:
        NODE_ENV: production

    # Security Analysis (moved from critical path)
    - name: 🔒 Security audit (non-blocking)
      run: npm run security:audit --audit-level=moderate
      continue-on-error: true
      timeout-minutes: 3

    # Code Complexity (advisory only)
    - name: 📊 Code complexity analysis
      run: npm run complexity:check
      continue-on-error: true
      timeout-minutes: 2

  # ================================
  # DEPLOYMENT
  # ================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gates, test, build, performance-analytics] # Added performance-analytics dependency
    if: needs.quality-gates.outputs.should-deploy == 'true' && (github.ref == 'refs/heads/develop' || inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-organism-simulation.pages.dev
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/

    - name: Download performance analytics
      uses: actions/download-artifact@v4
      with:
        name: performance-analytics-${{ github.sha }}
        path: .
      continue-on-error: true

    - name: Configure staging environment
      run: |
        echo "VITE_ENVIRONMENT=staging" >> .env
        echo "VITE_BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> .env
        echo "VITE_GIT_COMMIT=${{ github.sha }}" >> .env
        echo "VITE_VERSION=${{ needs.build.outputs.version }}" >> .env
        
        # Add performance metrics if available
        if [ -f "performance-analytics-report.json" ]; then
          PERFORMANCE_SCORE=$(cat performance-analytics-report.json | jq -r '.scorecard.overall // 75')
          echo "VITE_PERFORMANCE_SCORE=$PERFORMANCE_SCORE" >> .env
        fi

    - name: Deploy to Cloudflare Pages (Staging)
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: organism-simulation-staging
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}

    - name: Deploy Docker container (Staging)
      if: github.event_name != 'pull_request'
      run: |
        echo "🐳 Would deploy Docker container to staging..."
        # Add actual staging deployment logic here

    - name: Run staging smoke tests
      run: npm run test:smoke:staging
      continue-on-error: true

    - name: Post-deployment performance check
      if: success()
      run: |
        echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Version | ${{ needs.build.outputs.version }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Score | ${{ needs.performance-analytics.outputs.performance-score }}/100 |" >> $GITHUB_STEP_SUMMARY
        echo "| Bundle Size | ${{ needs.bundle-analysis.outputs.bundle-size }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Status | ✅ Deployed |" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gates, test, build, deploy-staging]
    if: needs.quality-gates.outputs.should-deploy == 'true' && (github.ref == 'refs/heads/main' || inputs.environment == 'production')
    environment:
      name: production
      url: https://organism-simulation.pages.dev
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/

    - name: Configure production environment
      run: |
        echo "VITE_ENVIRONMENT=production" >> .env
        echo "VITE_BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> .env
        echo "VITE_GIT_COMMIT=${{ github.sha }}" >> .env
        echo "VITE_VERSION=${{ needs.build.outputs.version }}" >> .env

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push production Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}
          ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        platforms: linux/amd64,linux/arm64

    - name: Deploy to Cloudflare Pages (Production)
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: organism-simulation
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        wranglerVersion: '3'

    - name: Run production smoke tests
      run: npm run test:smoke:production
      continue-on-error: true

    - name: Notify deployment success
      if: success()
      run: |
        echo "🎉 Production deployment successful!"
        echo "Version: ${{ needs.build.outputs.version }}"
        echo "Commit: ${{ github.sha }}"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Production deployment failed!"
        echo "Please check the logs and take immediate action."

  # ================================
  # MONITORING & MAINTENANCE
  # ================================
  
  # Comprehensive Analytics Dashboard
  analytics-dashboard:
    name: Analytics Dashboard
    runs-on: ubuntu-latest
    needs: [bundle-analysis, performance-analytics, test, build]
    if: always() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    timeout-minutes: 5

    steps:
    - name: Download all analytics artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "*-${{ github.sha }}"
        merge-multiple: true
      continue-on-error: true

    - name: Generate comprehensive dashboard
      run: |
        echo "📊 Generating comprehensive analytics dashboard..."
        
        # Create comprehensive analytics summary
        cat > analytics-dashboard.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}",
          "workflow_run": "${{ github.run_id }}",
          "analytics": {
            "bundle_analysis": {
              "size": "${{ needs.bundle-analysis.outputs.bundle-size }}",
              "optimization_potential": "${{ needs.bundle-analysis.outputs.optimization-potential }}",
              "status": "${{ needs.bundle-analysis.result }}"
            },
            "performance_analytics": {
              "score": "${{ needs.performance-analytics.outputs.performance-score }}",
              "recommendations": "${{ needs.performance-analytics.outputs.recommendations }}",
              "status": "${{ needs.performance-analytics.result }}"
            },
            "test_results": {
              "strategy": "${{ needs.smart-test-analysis.outputs.test-strategy }}",
              "time_saved": "${{ needs.smart-test-analysis.outputs.time-saved }}",
              "status": "${{ needs.test.result }}"
            },
            "build_status": "${{ needs.build.result }}"
          },
          "overall_health": {
            "pipeline_success": "${{ needs.build.result == 'success' && needs.test.result == 'success' }}",
            "performance_grade": "${{ needs.performance-analytics.outputs.performance-score >= 80 && 'Good' || 'Needs Improvement' }}",
            "optimization_needed": "${{ needs.bundle-analysis.outputs.optimization-potential > 20 && 'Yes' || 'No' }}"
          }
        }
        EOF

    - name: Upload analytics dashboard
      uses: actions/upload-artifact@v4
      with:
        name: analytics-dashboard-${{ github.sha }}
        path: analytics-dashboard.json
        retention-days: 90

    - name: Generate dashboard summary
      run: |
        echo "## 📊 CI/CD Analytics Dashboard" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Key Performance Indicators" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Bundle Size** | ${{ needs.bundle-analysis.outputs.bundle-size }} | ${{ needs.bundle-analysis.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Performance Score** | ${{ needs.performance-analytics.outputs.performance-score }}/100 | ${{ needs.performance-analytics.outputs.performance-score >= 80 && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Test Strategy** | ${{ needs.smart-test-analysis.outputs.test-strategy }} | ${{ needs.test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Time Saved** | ${{ needs.smart-test-analysis.outputs.time-saved }}s | ✅ |" >> $GITHUB_STEP_SUMMARY
        echo "| **Build Status** | - | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Optimization Opportunities" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Bundle Optimization**: ${{ needs.bundle-analysis.outputs.optimization-potential }}% potential improvement" >> $GITHUB_STEP_SUMMARY
        echo "- **Performance Recommendations**: ${{ needs.performance-analytics.outputs.recommendations }} active recommendations" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Overall Health**: ${{ needs.build.result == 'success' && needs.test.result == 'success' && '🟢 Healthy' || '🔴 Needs Attention' }}" >> $GITHUB_STEP_SUMMARY

  monitoring:
    name: Health & Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Check deployment health
      run: |
        echo "🏥 Checking application health..."
        
        # Health check staging
        if curl -f "https://staging-organism-simulation.pages.dev/health" 2>/dev/null; then
          echo "✅ Staging environment healthy"
        else
          echo "⚠️ Staging environment health check failed"
        fi
        
        # Health check production
        if curl -f "https://organism-simulation.pages.dev/health" 2>/dev/null; then
          echo "✅ Production environment healthy"
        else
          echo "❌ Production environment health check failed"
        fi

    - name: Performance monitoring
      run: |
        echo "📈 Running performance checks..."
        # Add performance monitoring logic
        echo "Performance monitoring completed"

    - name: Security monitoring
      run: |
        echo "🔒 Running security checks..."
        # Add security monitoring logic
        echo "Security monitoring completed"

  # ================================
  # CLEANUP
  # ================================
  cleanup:
    name: Cleanup & Maintenance
    runs-on: ubuntu-latest
    needs: [quality-gates, test, build, bundle-analysis, performance-analytics] # Updated dependencies
    if: always() && github.event_name != 'pull_request'
    timeout-minutes: 5

    steps:
    - name: Cleanup old artifacts
      run: |
        echo "🧹 Cleanup completed"
        # Artifacts are automatically cleaned up based on retention policy

    - name: Summary report
      run: |
        echo "📋 Pipeline Summary:"
        echo "- Commit: ${{ github.sha }}"
        echo "- Branch: ${{ github.ref_name }}"
        echo "- Quality Gates: ${{ needs.quality-gates.result || 'N/A' }}"
        echo "- Bundle Analysis: ${{ needs.bundle-analysis.result || 'N/A' }}"
        echo "- Performance Analytics: ${{ needs.performance-analytics.result || 'N/A' }}"
        echo "- Build Status: ${{ needs.build.result || 'N/A' }}"
        echo "- Tests Status: ${{ needs.test.result || 'N/A' }}"
        echo "- Overall Status: ${{ job.status }}"
        echo ""
        echo "🎯 Key Metrics:"
        echo "- Bundle Size: ${{ needs.bundle-analysis.outputs.bundle-size }}"
        echo "- Performance Score: ${{ needs.performance-analytics.outputs.performance-score }}/100"
        echo "- Test Strategy: ${{ needs.smart-test-analysis.outputs.test-strategy }}"
        echo "- Time Saved: ${{ needs.smart-test-analysis.outputs.time-saved }}s"
