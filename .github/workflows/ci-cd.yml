name: Optimized CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM for monitoring
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

# Cancel in-progress workflows for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
jobs:
  # ================================
  # VALIDATION & QUALITY
  # ================================
  validate:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 25
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # For better analysis

    - name: Generate cache key
      id: cache-key
      run: echo "key=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ~/.cache/ms-playwright
          dist/
        key: ${{ steps.cache-key.outputs.key }}-${{ github.sha }}
        restore-keys: |
          ${{ steps.cache-key.outputs.key }}-

    # Code Quality Checks
    - name: Lint code
      run: npm run lint

    - name: Type checking
      run: npm run type-check
      continue-on-error: true

    - name: Code complexity audit
      run: npm run complexity:check
      continue-on-error: false

    - name: Format check
      run: npm run format:check
      continue-on-error: true

    # Security Scanning
    - name: Security audit
      run: npm run security:audit
      continue-on-error: true

    - name: Dependency vulnerability scan
      if: env.SNYK_TOKEN != ''
      run: npm run security:scan
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      continue-on-error: true

    # Determine deployment strategy
    - name: Check deployment requirements
      id: deploy-check
      run: |
        if [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi

  # ================================
  # TESTING SUITE
  # ================================
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ !inputs.skip_tests }}
    timeout-minutes: 30

    strategy:
      matrix:
        test-type: [unit, e2e, performance]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Restore dependencies
      run: npm ci

    - name: Restore build cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ~/.cache/ms-playwright
          dist/
        key: ${{ needs.validate.outputs.cache-key }}-${{ github.sha }}
        restore-keys: |
          ${{ needs.validate.outputs.cache-key }}-

    # Unit Tests
    - name: Run unit tests with coverage
      if: matrix.test-type == 'unit'
      run: npm run test:coverage -- --reporter=verbose
      timeout-minutes: 15

    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit' && always()
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/lcov.info,./coverage/coverage-final.json
        directory: ./coverage
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

    # E2E Tests
    - name: Install Playwright browsers
      if: matrix.test-type == 'e2e'
      run: npx playwright install --with-deps
      timeout-minutes: 10

    - name: Run E2E tests
      if: matrix.test-type == 'e2e'
      run: npm run test:e2e
      timeout-minutes: 15

    # Performance Tests
    - name: Run performance tests
      if: matrix.test-type == 'performance'
      run: npm run test:performance
      timeout-minutes: 15

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          test-results/
          coverage/
          playwright-report/
        retention-days: 7

  # ================================
  # BUILD & CONTAINERIZE
  # ================================
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [validate]
    timeout-minutes: 20
    outputs:
      image-digest: ${{ steps.docker-build.outputs.digest }}
      version: ${{ steps.version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate version
      id: version
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          VERSION="$(cat package.json | jq -r .version)"
        else
          VERSION="$(cat package.json | jq -r .version)-dev.$(date +%s)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"

    - name: Build application
      run: npm run build
      env:
        VITE_BUILD_DATE: ${{ github.run_number }}
        VITE_GIT_COMMIT: ${{ github.sha }}
        VITE_VERSION: ${{ steps.version.outputs.version }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 7

    # Docker Build
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Docker image (test)
      id: docker-build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: |
          ${{ env.IMAGE_NAME }}:test
          ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Test Docker image
      run: |
        # Test container functionality
        docker run -d --name test-container -p 8080:8080 ${{ env.IMAGE_NAME }}:test
        sleep 10
        
        # Health checks
        curl -f http://localhost:8080/health || curl -f http://localhost:8080/ || exit 1
        
        # Cleanup
        docker stop test-container && docker rm test-container
        echo "✅ Docker image tests passed"

    - name: Run Docker security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'

    - name: Upload security scan results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Move Docker cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # ================================
  # QUALITY MONITORING
  # ================================
  quality-check:
    name: Quality & Performance Monitoring
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' || github.event_name == 'schedule'
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    # Lighthouse Performance Audit
    - name: Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      continue-on-error: true

    # Bundle Analysis
    - name: Analyze bundle size
      run: |
        npm run build -- --analyze
        echo "📦 Bundle analysis complete"
      continue-on-error: true

  # ================================
  # DEPLOYMENT
  # ================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, test, build]
    if: needs.validate.outputs.should-deploy == 'true' && (github.ref == 'refs/heads/develop' || inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-organism-simulation.pages.dev
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/

    - name: Configure staging environment
      run: |
        echo "VITE_ENVIRONMENT=staging" >> .env
        echo "VITE_BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> .env
        echo "VITE_GIT_COMMIT=${{ github.sha }}" >> .env
        echo "VITE_VERSION=${{ needs.build.outputs.version }}" >> .env

    - name: Deploy to Cloudflare Pages (Staging)
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: organism-simulation-staging
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}

    - name: Deploy Docker container (Staging)
      if: github.event_name != 'pull_request'
      run: |
        echo "🐳 Would deploy Docker container to staging..."
        # Add actual staging deployment logic here

    - name: Run staging smoke tests
      run: npm run test:smoke:staging
      continue-on-error: true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, test, build, deploy-staging]
    if: needs.validate.outputs.should-deploy == 'true' && (github.ref == 'refs/heads/main' || inputs.environment == 'production')
    environment:
      name: production
      url: https://organism-simulation.pages.dev
    timeout-minutes: 20

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/

    - name: Configure production environment
      run: |
        echo "VITE_ENVIRONMENT=production" >> .env
        echo "VITE_BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> .env
        echo "VITE_GIT_COMMIT=${{ github.sha }}" >> .env
        echo "VITE_VERSION=${{ needs.build.outputs.version }}" >> .env

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push production Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}
          ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        platforms: linux/amd64,linux/arm64

    - name: Deploy to Cloudflare Pages (Production)
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: organism-simulation
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        wranglerVersion: '3'

    - name: Run production smoke tests
      run: npm run test:smoke:production
      continue-on-error: true

    - name: Notify deployment success
      if: success()
      run: |
        echo "🎉 Production deployment successful!"
        echo "Version: ${{ needs.build.outputs.version }}"
        echo "Commit: ${{ github.sha }}"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Production deployment failed!"
        echo "Please check the logs and take immediate action."

  # ================================
  # MONITORING & MAINTENANCE
  # ================================
  monitoring:
    name: Health & Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Check deployment health
      run: |
        echo "🏥 Checking application health..."
        
        # Health check staging
        if curl -f "https://staging-organism-simulation.pages.dev/health" 2>/dev/null; then
          echo "✅ Staging environment healthy"
        else
          echo "⚠️ Staging environment health check failed"
        fi
        
        # Health check production
        if curl -f "https://organism-simulation.pages.dev/health" 2>/dev/null; then
          echo "✅ Production environment healthy"
        else
          echo "❌ Production environment health check failed"
        fi

    - name: Performance monitoring
      run: |
        echo "📈 Running performance checks..."
        # Add performance monitoring logic
        echo "Performance monitoring completed"

    - name: Security monitoring
      run: |
        echo "🔒 Running security checks..."
        # Add security monitoring logic
        echo "Security monitoring completed"

  # ================================
  # CLEANUP
  # ================================
  cleanup:
    name: Cleanup & Maintenance
    runs-on: ubuntu-latest
    needs: [validate, test, build]
    if: always() && github.event_name != 'pull_request'
    timeout-minutes: 5

    steps:
    - name: Cleanup old artifacts
      run: |
        echo "🧹 Cleanup completed"
        # Artifacts are automatically cleaned up based on retention policy

    - name: Summary report
      run: |
        echo "📋 Pipeline Summary:"
        echo "- Commit: ${{ github.sha }}"
        echo "- Branch: ${{ github.ref_name }}"
        echo "- Build Status: ${{ needs.build.result || 'N/A' }}"
        echo "- Tests Status: ${{ needs.test.result || 'N/A' }}"
        echo "- Overall Status: ${{ job.status }}"
