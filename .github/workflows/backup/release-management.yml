name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    outputs:
      release-tag: ${{ steps.version.outputs.tag }}
      release-notes: ${{ steps.release-notes.outputs.notes }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        registry-url: 'https://npm.pkg.github.com'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manual release - bump version
          echo "Bumping version: ${{ github.event.inputs.version_type }}"
          NEW_VERSION=$(npm version ${{ github.event.inputs.version_type }} --no-git-tag-version)
          echo "tag=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Commit version change
          git add package.json package-lock.json
          git commit -m "chore: bump version to $NEW_VERSION"
          git push origin main
          
          # Create tag
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
        else
          # Tag-triggered release
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Update package.json to match tag
          npm version $TAG_NAME --no-git-tag-version --allow-same-version
        fi
    
    - name: Generate release notes
      id: release-notes
      run: |
        if [ -n "${{ github.event.inputs.release_notes }}" ]; then
          NOTES="${{ github.event.inputs.release_notes }}"
        else
          # Auto-generate release notes from commits
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating release notes from $PREVIOUS_TAG to HEAD"
            NOTES=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --reverse)
          else
            echo "No previous tag found, generating notes from recent commits"
            NOTES=$(git log --pretty=format:"- %s" --reverse -10)
          fi
        fi
        
        # Save notes to file for multiline handling
        cat << 'EOF' > release_notes.md
        ## üöÄ Release ${{ steps.version.outputs.tag }}
        
        ### Changes
        $NOTES
        
        ### üìä Metrics
        - Build Date: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
        - Commit: ${{ github.sha }}
        - Author: ${{ github.actor }}
        
        ### üîß Installation
        ```bash
        # Clone the repository
        git clone https://github.com/and3rn3t/simulation.git
        cd simulation
        
        # Checkout this release
        git checkout ${{ steps.version.outputs.tag }}
        
        # Install dependencies
        npm install
        
        # Build and run
        npm run build
        npm run preview
        ```
        
        ### üåê Live Demo
        - Production: https://organisms.andernet.dev
        - Cloudflare: https://organism-simulation.pages.dev
        EOF
        
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Build release artifacts
      run: |
        echo "üî® Building release artifacts..."
        
        # Build for production
        npm run build:production
        
        # Create release package
        tar -czf organism-simulation-${{ steps.version.outputs.tag }}.tar.gz dist/
        zip -r organism-simulation-${{ steps.version.outputs.tag }}.zip dist/
        
        # Generate checksums
        sha256sum organism-simulation-${{ steps.version.outputs.tag }}.tar.gz > checksums.txt
        sha256sum organism-simulation-${{ steps.version.outputs.tag }}.zip >> checksums.txt
        
        echo "üì¶ Artifacts created:"
        ls -la organism-simulation-${{ steps.version.outputs.tag }}.*
        echo "üîç Checksums:"
        cat checksums.txt
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Release ${{ steps.version.outputs.tag }}
        body: ${{ steps.release-notes.outputs.notes }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.tag, 'alpha') || contains(steps.version.outputs.tag, 'beta') || contains(steps.version.outputs.tag, 'rc') }}
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./organism-simulation-${{ steps.version.outputs.tag }}.tar.gz
        asset_name: organism-simulation-${{ steps.version.outputs.tag }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Upload ZIP Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./organism-simulation-${{ steps.version.outputs.tag }}.zip
        asset_name: organism-simulation-${{ steps.version.outputs.tag }}.zip
        asset_content_type: application/zip
    
    - name: Upload Checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: create-release
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create-release.outputs.release-tag }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: npm run build:production
    
    - name: Deploy to production
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: organism-simulation
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        wranglerVersion: '3'
    
    - name: Post-deployment validation
      run: |
        echo "üîç Validating production deployment..."
        npm run test:smoke:production
        echo "‚úÖ Production deployment validated"

  notify-release:
    name: Release Notifications
    runs-on: ubuntu-latest
    needs: [create-release, deploy-release]
    if: always()
    
    steps:
    - name: Release Summary
      run: |
        echo "üéâ Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "=================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Release:** ${{ needs.create-release.outputs.release-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ needs.deploy-release.result == 'success' && '‚úÖ Deployed Successfully' || '‚ùå Deployment Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üåê **Live URLs:**" >> $GITHUB_STEP_SUMMARY
        echo "- Production: https://organisms.andernet.dev" >> $GITHUB_STEP_SUMMARY
        echo "- Cloudflare: https://organism-simulation.pages.dev" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìã **Next Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor application for any issues" >> $GITHUB_STEP_SUMMARY
        echo "- Update documentation if needed" >> $GITHUB_STEP_SUMMARY
        echo "- Announce release to stakeholders" >> $GITHUB_STEP_SUMMARY
    
    - name: Create deployment status
      run: |
        if [ "${{ needs.deploy-release.result }}" = "success" ]; then
          echo "‚úÖ Release ${{ needs.create-release.outputs.release-tag }} deployed successfully!"
        else
          echo "‚ùå Release ${{ needs.create-release.outputs.release-tag }} deployment failed!"
          echo "Please check the deployment logs and take corrective action."
        fi
