name: Performance & Quality Monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance monitoring weekly
    - cron: '0 4 * * 1'

jobs:
  lighthouse-ci:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Serve application
      run: |
        npm install -g http-server
        http-server dist -p 8080 &
        sleep 5
    
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
    
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-results
        path: .lighthouseci/
        retention-days: 30

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build and analyze bundle
      run: |
        npm run build
        npx vite-bundle-analyzer dist --mode json --report-filename bundle-report.json
    
    - name: Check bundle size
      run: |
        echo "📦 Bundle Analysis Report" >> $GITHUB_STEP_SUMMARY
        echo "========================" >> $GITHUB_STEP_SUMMARY
        
        # Get main bundle size
        MAIN_SIZE=$(find dist -name "*.js" -type f -exec du -sh {} + | head -1 | cut -f1)
        echo "Main Bundle: $MAIN_SIZE" >> $GITHUB_STEP_SUMMARY
        
        # Check if bundle size is reasonable (< 1MB for main bundle)
        MAIN_SIZE_BYTES=$(find dist -name "*.js" -type f -exec stat -f%z {} + | head -1)
        if [ $MAIN_SIZE_BYTES -gt 1048576 ]; then
          echo "⚠️ Bundle size warning: Main bundle exceeds 1MB" >> $GITHUB_STEP_SUMMARY
          echo "Consider code splitting or dependency optimization" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ Bundle size looks good!" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis
        path: bundle-report.json
        retention-days: 30

  accessibility-audit:
    name: Accessibility Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Install axe-core CLI
      run: npm install -g @axe-core/cli
    
    - name: Serve application
      run: |
        npm install -g http-server
        http-server dist -p 8080 &
        sleep 5
    
    - name: Run accessibility audit
      run: |
        echo "🌐 Running accessibility audit..."
        axe http://localhost:8080 --tags wcag2a,wcag2aa --save axe-results.json
        
        echo "♿ Accessibility Audit Results" >> $GITHUB_STEP_SUMMARY
        echo "=============================" >> $GITHUB_STEP_SUMMARY
        
        # Parse results and add to summary
        if [ -f axe-results.json ]; then
          VIOLATIONS=$(jq '.violations | length' axe-results.json)
          echo "Violations found: $VIOLATIONS" >> $GITHUB_STEP_SUMMARY
          
          if [ $VIOLATIONS -gt 0 ]; then
            echo "❌ Accessibility issues found. Please review and fix." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No accessibility violations found!" >> $GITHUB_STEP_SUMMARY
          fi
        fi
      continue-on-error: true
    
    - name: Upload accessibility results
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-results
        path: axe-results.json
        retention-days: 30

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for SonarCloud analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests with coverage
      run: npm run test:coverage
      continue-on-error: true
    
    - name: SonarCloud Analysis
      if: env.SONAR_TOKEN != ''
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=and3rn3t_simulation
          -Dsonar.organization=and3rn3t
          -Dsonar.qualitygate.wait=false
      continue-on-error: true
    
    - name: ESLint Report
      run: |
        npm run lint -- --format json --output-file eslint-report.json
        
        echo "📋 Code Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "=====================" >> $GITHUB_STEP_SUMMARY
        
        # Parse ESLint results
        if [ -f eslint-report.json ]; then
          ERRORS=$(jq '[.[].errorCount] | add' eslint-report.json)
          WARNINGS=$(jq '[.[].warningCount] | add' eslint-report.json)
          
          echo "ESLint Errors: $ERRORS" >> $GITHUB_STEP_SUMMARY
          echo "ESLint Warnings: $WARNINGS" >> $GITHUB_STEP_SUMMARY
          
          if [ $ERRORS -gt 0 ]; then
            echo "❌ ESLint errors found. Please fix before merging." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No ESLint errors found!" >> $GITHUB_STEP_SUMMARY
          fi
        fi
      continue-on-error: true
    
    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-reports
        path: |
          eslint-report.json
          coverage/
        retention-days: 30

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run performance tests
      run: |
        echo "⚡ Running performance benchmarks..."
        npm run test:performance
        
        echo "🏎️ Performance Test Results" >> $GITHUB_STEP_SUMMARY
        echo "===========================" >> $GITHUB_STEP_SUMMARY
        echo "Performance tests completed. Check artifacts for detailed results." >> $GITHUB_STEP_SUMMARY
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: test-results/
        retention-days: 30

  quality-gate:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [lighthouse-ci, bundle-analysis, accessibility-audit, code-quality, performance-monitoring]
    if: always()
    
    steps:
    - name: Quality Gate Summary
      run: |
        echo "🎯 Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
        echo "======================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Lighthouse CI | ${{ needs.lighthouse-ci.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Bundle Analysis | ${{ needs.bundle-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Accessibility Audit | ${{ needs.accessibility-audit.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Monitoring | ${{ needs.performance-monitoring.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine overall quality gate status
        FAILED_JOBS=$(echo "${{ needs.lighthouse-ci.result }} ${{ needs.bundle-analysis.result }} ${{ needs.accessibility-audit.result }} ${{ needs.code-quality.result }} ${{ needs.performance-monitoring.result }}" | grep -o "failure" | wc -l)
        
        if [ $FAILED_JOBS -eq 0 ]; then
          echo "✅ **Quality Gate: PASSED** - All checks successful!" >> $GITHUB_STEP_SUMMARY
        elif [ $FAILED_JOBS -le 2 ]; then
          echo "⚠️ **Quality Gate: WARNING** - Some checks failed but deployment may proceed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Quality Gate: FAILED** - Multiple checks failed, review required" >> $GITHUB_STEP_SUMMARY
        fi
