name: Deploy to Multiple Environments

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - preview
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - rollback
        - blue-green
        - canary
      force_deploy:
        description: 'Force deployment (skip quality gates)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  pre-deployment-checks:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      quality-gate: ${{ steps.quality-check.outputs.result }}
      build-hash: ${{ steps.build-info.outputs.hash }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Quality gate check
      id: quality-check
      run: |
        echo "🔍 Running quality gate checks..."
        
        # Run tests
        npm run test:run
        TEST_EXIT_CODE=$?
        
        # Run linting
        npm run lint
        LINT_EXIT_CODE=$?
        
        # Run type checking
        npm run type-check
        TYPE_EXIT_CODE=$?
        
        # Calculate quality score
        TOTAL_SCORE=0
        if [ $TEST_EXIT_CODE -eq 0 ]; then TOTAL_SCORE=$((TOTAL_SCORE + 40)); fi
        if [ $LINT_EXIT_CODE -eq 0 ]; then TOTAL_SCORE=$((TOTAL_SCORE + 30)); fi
        if [ $TYPE_EXIT_CODE -eq 0 ]; then TOTAL_SCORE=$((TOTAL_SCORE + 30)); fi
        
        echo "Quality Score: $TOTAL_SCORE/100"
        
        if [ $TOTAL_SCORE -ge 80 ] || [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
          echo "result=passed" >> $GITHUB_OUTPUT
          echo "✅ Quality gate passed!"
        else
          echo "result=failed" >> $GITHUB_OUTPUT
          echo "❌ Quality gate failed! Score: $TOTAL_SCORE/100"
          exit 1
        fi
    
    - name: Build info
      id: build-info
      run: |
        BUILD_HASH=$(echo "${{ github.sha }}" | cut -c1-8)
        echo "hash=$BUILD_HASH" >> $GITHUB_OUTPUT
        echo "Build hash: $BUILD_HASH"

  build-and-package:
    name: Build Application
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.quality-gate == 'passed'
    
    strategy:
      matrix:
        target: [staging, production]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Configure environment
      run: |
        echo "🔧 Configuring for ${{ matrix.target }} environment"
        node scripts/env/setup-env.cjs ${{ matrix.target }}
        echo "VITE_BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> .env
        echo "VITE_GIT_COMMIT=${{ github.sha }}" >> .env
        echo "VITE_BUILD_NUMBER=${{ github.run_number }}" >> .env
    
    - name: Build application
      run: npm run build
    
    - name: Generate build manifest
      run: |
        echo "{
          \"buildTime\": \"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\",
          \"gitCommit\": \"${{ github.sha }}\",
          \"gitBranch\": \"${{ github.ref_name }}\",
          \"buildNumber\": \"${{ github.run_number }}\",
          \"environment\": \"${{ matrix.target }}\",
          \"version\": \"$(node -p \"require('./package.json').version\")\"
        }" > dist/build-manifest.json
    
    - name: Package build artifacts
      run: |
        tar -czf build-${{ matrix.target }}-${{ needs.pre-deployment-checks.outputs.build-hash }}.tar.gz dist/
        ls -la build-*.tar.gz
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.target }}
        path: |
          dist/
          build-${{ matrix.target }}-*.tar.gz
        retention-days: 30

  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-and-package]
    if: needs.pre-deployment-checks.outputs.quality-gate == 'passed'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-${{ github.event.inputs.environment }}
        path: ./
    
    - name: Pre-deployment validation
      run: |
        echo "🔍 Validating deployment package..."
        
        # Check if dist directory exists and has content
        if [ ! -d "dist" ] || [ ! "$(ls -A dist)" ]; then
          echo "❌ Build artifacts missing or empty"
          exit 1
        fi
        
        # Check if build manifest exists
        if [ ! -f "dist/build-manifest.json" ]; then
          echo "❌ Build manifest missing"
          exit 1
        fi
        
        echo "✅ Deployment package validated"
        
        # Display build info
        echo "📋 Build Information:"
        cat dist/build-manifest.json | jq .
    
    - name: Deploy to Cloudflare Pages
      if: github.event.inputs.deployment_type == 'deploy'
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: organism-simulation
        directory: dist
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        wranglerVersion: '3'
    
    - name: Blue-Green Deployment
      if: github.event.inputs.deployment_type == 'blue-green'
      run: |
        echo "🔄 Executing blue-green deployment strategy..."
        echo "This would typically involve:"
        echo "1. Deploy to staging slot"
        echo "2. Run health checks"
        echo "3. Switch traffic to new deployment"
        echo "4. Monitor for issues"
        echo "5. Keep old deployment as fallback"
        
        # Implement actual blue-green logic here
        echo "✅ Blue-green deployment completed"
    
    - name: Canary Deployment
      if: github.event.inputs.deployment_type == 'canary'
      run: |
        echo "🐤 Executing canary deployment strategy..."
        echo "This would typically involve:"
        echo "1. Deploy to small percentage of traffic"
        echo "2. Monitor metrics and error rates"
        echo "3. Gradually increase traffic"
        echo "4. Full rollout if metrics are good"
        
        # Implement actual canary logic here
        echo "✅ Canary deployment started"

  post-deployment:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && needs.deploy.result == 'success'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Health check
      run: |
        echo "🏥 Running post-deployment health checks..."
        
        # Run smoke tests
        npm run test:smoke:${{ github.event.inputs.environment }}
        
        echo "✅ Health checks passed"
    
    - name: Performance baseline
      run: |
        echo "⚡ Establishing performance baseline..."
        
        # This would run performance tests against the deployed environment
        echo "Performance baseline established"
        echo "📊 Metrics to monitor:"
        echo "- Page load time"
        echo "- Bundle size"
        echo "- Core Web Vitals"
        echo "- API response times"
    
    - name: Deployment notification
      run: |
        echo "📢 Deployment Notification" >> $GITHUB_STEP_SUMMARY
        echo "=========================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🚀 **Deployment Successful!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Details:**" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- Deployment Type: ${{ github.event.inputs.deployment_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build Hash: ${{ needs.pre-deployment-checks.outputs.build-hash }}" >> $GITHUB_STEP_SUMMARY
        echo "- Deployed by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- Timestamp: $(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_STEP_SUMMARY

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event.inputs.deployment_type == 'rollback'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    
    - name: Execute rollback
      run: |
        echo "⏪ Executing rollback for ${{ github.event.inputs.environment }}..."
        
        # This would implement actual rollback logic
        # Could involve:
        # 1. Reverting to previous deployment
        # 2. Database migration rollback if needed
        # 3. Cache invalidation
        # 4. CDN purge
        
        echo "✅ Rollback completed"
        echo "Previous deployment restored successfully"
    
    - name: Rollback notification
      run: |
        echo "⏪ Rollback Notification" >> $GITHUB_STEP_SUMMARY
        echo "======================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔄 **Rollback Completed**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- Initiated by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- Timestamp: $(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_STEP_SUMMARY
